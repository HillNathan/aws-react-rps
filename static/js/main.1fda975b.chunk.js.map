{"version":3,"sources":["utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","API","playRPS","theThrow","post","CORSAnywhere","myThrow","module","exports","App","state","lambda","result","playLambdaRPS","setState","then","response","data","className","type","test-id","onClick","this","toUpperCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAAA,IAAMA,EAAQC,EAAQ,IAQhBC,EAAM,CAERC,QAAU,SAAAC,GAAQ,OAAIJ,EAAMK,KAAKC,6GAAsB,CAACC,QAAUH,MAGtEI,EAAOC,QAAUP,G,2HCTXA,G,MAAMD,EAAQ,KAsGLS,E,4MAlGbC,MAAQ,CACNJ,QAAS,GACTK,OAAQ,GACRC,OAAQ,I,EAIVC,cAAgB,SAACP,GAEf,EAAKQ,SAAS,CAACR,YAGfL,EAAIC,QAAQI,GACXS,MAAK,SAAAC,GAGJ,EAAKF,SAAS,CACZH,OAASK,EAASC,KAAKN,OACvBC,OAASI,EAASC,KAAKL,a,uDAMnB,IAAD,OACP,OACE,sBAAKM,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,YAAd,0CAGF,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAY,YAAjB,UACE,sBAAKA,UAAU,6BAAf,UACM,qBAAKA,UAAU,QAAf,SAEE,wBAAQC,KAAK,SACLC,UAAQ,cACRF,UAAU,2BACVG,QAAS,kBAAM,EAAKR,cAAc,SAH1C,oBAOF,qBAAKK,UAAU,QAAf,SAEE,wBAAQC,KAAK,SACLC,UAAQ,eACRF,UAAU,4BACVG,QAAS,kBAAM,EAAKR,cAAc,UAH1C,qBAOF,qBAAKK,UAAU,QAAf,SAEE,wBAAQC,KAAK,SACLC,UAAQ,cACRF,UAAU,+BACVG,QAAS,kBAAM,EAAKR,cAAc,aAH1C,2BAUR,qBAAKK,UAAU,6BAAf,SACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,4CAAf,2BAGA,qBAAKA,UAAU,0CAAf,SAEE,+BAAOI,KAAKZ,MAAMC,OAAOY,kBAE3B,qBAAKL,UAAU,2CAAf,SAI2B,QAAtBI,KAAKZ,MAAME,OACZ,4CAEuB,SAAtBU,KAAKZ,MAAME,OACV,+CAEuB,SAAtBU,KAAKZ,MAAME,OACV,2CAEA,0D,GAxFNY,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1fda975b.chunk.js","sourcesContent":["const axios = require('axios')\r\n\r\nconst myAWS = 'https://0dvqmfkhye.execute-api.us-east-2.amazonaws.com/default/NateRPS'\r\n\r\n// Adding in the CORS-anywhere to remove CORS errors from the react app. \r\nconst CORSAnywhere = 'https://cors-anywhere.herokuapp.com/'\r\n\r\n// isloating my axios function in this module\r\nconst API = {\r\n    // making a call to my own AWS Lambda API to play Rock-Paper-Scissors\r\n    playRPS : theThrow => axios.post(CORSAnywhere + myAWS, {myThrow : theThrow})\r\n}\r\n\r\nmodule.exports = API\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\n\n// bringing in an external module that will hold our API calls. \nconst API = require('./utils')\n\nclass App extends Component {\n  // set some initial values for state. \n  state = {\n    myThrow: \"\",\n    lambda: \"\",\n    result: \"\"\n  }\n\n  // makes a call to my own AWS API endpoint and should return a JSON object telling me if I won or lost\n  playLambdaRPS = (myThrow) => {\n    // set my value to the local state\n    this.setState({myThrow})\n\n    // make the call to the AWS lambda function with my choice\n    API.playRPS(myThrow)\n    .then(response => {\n      // handle the response from the Lambda function. We're putting the response in state, since our component \n      //  will react to the data in state and update the appropriate values in our app. \n      this.setState({\n        lambda : response.data.lambda,\n        result : response.data.result\n      })\n    })\n  }\n\n  // OUR JSX is down here...\n  render() {\n    return (\n      <div className=\"App\">\n        <header className='App-header'>\n          <h1 className='display-3'>Nate's AWS Lambda RPS Game</h1>\n        </header>\n\n        <div className='App-main'>\n          <div className = 'container'>\n            <div className='row justify-content-center'>\n                  <div className=\"col-4\">\n                    {/* Rock Button */}\n                    <button type=\"button\" \n                            test-id=\"rock-button\"\n                            className=\"btn btn-dark rock-button\"\n                            onClick={() => this.playLambdaRPS(\"rock\")}>\n                      ROCK\n                    </button>\n                  </div>\n                  <div className=\"col-4\">\n                    {/* Paper Button */}\n                    <button type=\"button\" \n                            test-id=\"paper-button\"\n                            className=\"btn btn-dark paper-button\"\n                            onClick={() => this.playLambdaRPS(\"paper\")}>\n                      PAPER\n                    </button>\n                  </div>\n                  <div className=\"col-4\">\n                    {/* Scissors Button */}\n                    <button type=\"button\" \n                            test-id=\"rock-button\"\n                            className=\"btn btn-dark scissors-button\"\n                            onClick={() => this.playLambdaRPS(\"scissors\")}>\n                      SCISSORS\n                    </button>\n                  </div>\n            </div>\n\n            {/* RPS response area */}\n            <div className='row justify-content-center'>\n              <div className=\"col-4\">\n                <div className=\"row justify-content-center lambda-header \">\n                    LAMBDA THROW:\n                </div>\n                <div className=\"row justify-content-center lambda-throw\">\n                  {/* This div tag shows the response from the lambda function directly from state */}\n                  <span>{this.state.lambda.toUpperCase()}</span>  \n                </div>\n                <div className=\"row justify-content-center lambda-result\">\n                  {/* This div tag contains a series of ternery operators to helps parse the result from state and \n                        show a custom message for each possible outcome, including a final fail for the empty string \n                        from the initial state.  */}\n                  { (this.state.result === \"win\" ? \n                    <span>YOU WIN!</span>\n                    : \n                    (this.state.result === \"lose\") ?\n                      <span>YOU LOSE!!!</span>\n                      :\n                      (this.state.result === \"draw\") ?\n                        <span>DRAW...</span>\n                        :\n                        <span>...</span>)\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}